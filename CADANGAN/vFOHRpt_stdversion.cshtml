<style>
    th {
        background-color: #d2e0e0;
    }

    tr:hover {
        background-color: #d6f5f5;
    }

    .loader {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        background: Url("/Content/images/pageLoader.gif") 50% 50% no-repeat rgb(249,249,249);
        opacity: .8;
    }
</style>

<body>
    <div class="container">
        <h4>Report FOH</h4>
        <div class="row">
            <div class="col-sm-1">
                <label for="thn">Year</label>
            </div>
            <div class="col-sm-2">
                <div class="input-group date datetimepicker">
                    <input type="text" class="form-control" id="thn" placeholder="YYYY" />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
            <div class="col-sm-1">
                <label for="bulan">Month</label>
            </div>
            <div class="col-sm-4">
                <select class="form-control" id="bln">
                    <option value="1">JANUARY</option>
                    <option value="2">FEBRUARY</option>
                    <option value="3">MARCH</option>
                    <option value="4">APRIL</option>
                    <option value="5">MAY</option>
                    <option value="6">JUNE</option>
                    <option value="7">JULY</option>
                    <option value="8">AUGUSTUS</option>
                    <option value="9">SEPTEMBER</option>
                    <option value="10">OCTOBER</option>
                    <option value="11">NOVEMBER</option>
                    <option value="12">DECEMBER</option>
                </select>
            </div>

            <div class="col-sm-2">
                <button id="periode" type="button" class="btn btn-danger btn-md" data-toggle="tooltip" title="View" onclick="GetPeriode();">Preview</button>
            </div>
            <div class="col-sm-2">
                <button id="btnExport" type="button" class="btn btn-danger btn-md" data-toggle="tooltip" title="Export to XLS" onclick="javascript: xport.toCSV('table-basic');">Export to XLS</button>
            </div>
        </div>
        <hr />

        <div class="table-scrollable" style="height: 475px;">
            <table cellspacing="0" id="table-basic" class="table table-sm table-bordered table-striped" style="min-width: 800px;">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th><span class='pull-right'>KWH Beban Puncak</span></th>
                        <th><span class='pull-right'>KWH Beban Normal</span></th>
                        <th><span class='pull-right'>Rp Beban Puncak</span></th>
                        <th><span class='pull-right'>Rp Beban Normal</span></th>
                        <th><span class='pull-right'>Total</span></th>
                        <th><span class='pull-right'>Alokasi Casting-88%</span></th>
                        <th><span class='pull-right'>Alokasi Machining-9%</span></th>
                        <th><span class='pull-right'>Alokasi Medical-3%</span></th>
                        <th><span class='pull-right'>PDA - Kg</span></th>
                        <th><span class='pull-right'>Cost AVE - Kg</span></th>
                    </tr>
                </thead>


                <tbody id="tbodytblfoh"></tbody>

            </table>
        </div>
        <br>

    </div> <!-- /container -->
    <div class="loader"></div>
</body>

@Scripts.Render("~/Scripts/freeze-table.js")

<script>
    var urlKPI = "@Url.Content("~/Dashboard")";
    var dtarray = [];
    var arraydt = [];
    var nilai1;
    var nilai2;
    var nilai3;
    $(document).ready(function () {

      $(".table-basic").freezeTable();

      $(".table-scrollable").freezeTable({
          'scrollable': true,
          'shadow': true,
          'columnNum': 2,
      });

      $('.datetimepicker').datetimepicker({
          format: 'YYYY'
      });
      $(".loader").hide();

      var dNow = new Date()
      var iMonth = dNow.getMonth() + 1
      var iYear = dNow.getFullYear()
      $('#thn').val(iYear);
      $('#bln').val(iMonth);
      //--getView(iMonth , iYear);

    });


    function getView(month, year) {
        var nilai = 0;
        var tr;
        var ppicObj = {
            bln: month,
            thn: year
        };

        $.ajax({
            url: urlKPI + "/RptFOHDetail/",
            data: JSON.stringify(ppicObj),
            contentType: "application/json;charset=utf-8",
            success: function (result) {
                $.each(result, function (key, item) {
                    dtarray.push(item);
                    var s = item.ddate;
                    if (s != 'TOTAL') {
                        //----
                        var dtobj= { ddate: s };
                        $.ajax({
                            url: urlKPI + "/RptFOHDetailChild/",
                            data: JSON.stringify(dtobj),
                            contentType: "application/json;charset=utf-8",
                            success: function (result) {
                                $.each(result, function (key, item) {
                                    arraydt.push(item);
                                });
                            },
                            error: function (errormessage) {
                                alert(errormessage.responseText);
                            },
                            type: 'POST', dataType: 'json'
                        });
                        //--
                    }

                });
            },
            error: function (errormessage) {
                alert(errormessage.responseText);
            },
            beforeSend: function () { $(".loader").show(); },
            complete: function () { $(".loader").hide(); },
            type: 'POST', dataType: 'json'
        });
    
     
    }


    function cari(nil2) {
        var dtnya = 0;
        arraydt.forEach(function (e) {
            if (nil2 == e.dPDEDate.toString().trim())
                dtnya = (e.pda);
        });
        return dtnya;
    }


    function GetPeriode() {
        var tr;
        var newpda = 0;
        var newkg = 0;
        var totkg = 0;
        var newyear = $('#thn').val();
        var newmonth = $('#bln').val();
        getView(newmonth, newyear);
        $.each(dtarray, function (index, value) {
            nilai3 = 0;
            nilai1 = value.ddate.toString().trim();
            var newnil = cari(nilai1);
            value.pda = newnil;
        })

        $('#tbodytblfoh').empty();
        $(".table-basic").freezeTable();

        $(".table-scrollable").freezeTable({
            'scrollable': true,
            'shadow': true,
            'columnNum': 2,
        });


        $.each(dtarray, function (index, value) {
            tr = $('<tr/>');
            var s = value.ddate;
            if (s.match(/TOTAL.*/))
                tr.append("<td><span class='pull-right'>" + value.ddate + "</span></td>");
            else 
                tr.append("<td><span>" + value.ddate + "</span></td>");
            tr.append("<td><span class='pull-right'>" + formatNumber(value.kwhbebanpuncak) + "</span></td>");
            tr.append("<td><span class='pull-right'>" + formatNumber(value.kwhbebannormal) + "</span></td>");
            tr.append("<td><span class='pull-right'>" + formatNumber(value.rpbebanpuncak) + "</span></td>");
            tr.append("<td><span class='pull-right'>" + formatNumber(value.rpbebannormal) + "</span></td>");
            tr.append("<td><span class='pull-right'>" + formatNumber(value.rpbebann) + " </span></td>");
            tr.append("<td><span class='pull-right'>" + formatNumber((value.rpbebann * 0.88).toFixed(2)) + "</span></td>");
            tr.append("<td><span class='pull-right'>" + formatNumber((value.rpbebann * 0.09).toFixed(2)) + "</span></td>");
            tr.append("<td><span class='pull-right'>" + formatNumber((value.rpbebann * 0.03).toFixed(2)) + "</span></td>");
            newpda = newpda + value.pda;

            if (value.pda !== 0)
                newkg = value.rpbebann * 0.88 / value.pda;
            else newkg = 0;

            totkg = totkg + newkg;

            if (s.match(/TOTAL.*/)) {
                tr.append("<td><span class='pull-right'>" + formatNumber(newpda.toFixed(2)) + "</span></td>");
                tr.append("<td><span class='pull-right'>" + formatNumber(totkg.toFixed(2)) + "</span></td>");
            }
            else {
                tr.append("<td><span class='pull-right'>" + formatNumber((value.pda).toFixed(2)) + "</span></td>");
                tr.append("<td><span class='pull-right'>" + formatNumber(newkg.toFixed(2)) + "</span></td>");
            }

            $('table').append(tr);

        })

        arraydt = [];
        dtarray = [];


        //arraydt.length = 0;
        //dtarray.length = 0;
    }

    


    function formatNumber(num) {
        return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")
    }

    var xport = {
        _fallbacktoCSV: true,
        toXLS: function (tableId, filename) {
            this._filename = (typeof filename == 'undefined') ? tableId : filename;

            //var ieVersion = this._getMsieVersion();
            //Fallback to CSV for IE & Edge
            if ((this._getMsieVersion() || this._isFirefox()) && this._fallbacktoCSV) {
                return this.toCSV(tableId);
            } else if (this._getMsieVersion() || this._isFirefox()) {
                alert("Not supported browser");
            }

            //Other Browser can download xls
            var htmltable = document.getElementById(tableId);
            var html = htmltable.outerHTML;

            this._downloadAnchor("data:application/vnd.ms-excel" + encodeURIComponent(html), 'xls');
        },
        toCSV: function (tableId, filename) {
            this._filename = (typeof filename === 'undefined') ? tableId : filename;
            // Generate our CSV string from out HTML Table
            var csv = this._tableToCSV(document.getElementById(tableId));
            // Create a CSV Blob
            var blob = new Blob([csv], { type: "text/csv" });

            // Determine which approach to take for the download
            if (navigator.msSaveOrOpenBlob) {
                // Works for Internet Explorer and Microsoft Edge
                navigator.msSaveOrOpenBlob(blob, this._filename + ".csv");
            } else {
                this._downloadAnchor(URL.createObjectURL(blob), 'csv');
            }
        },
        _getMsieVersion: function () {
            var ua = window.navigator.userAgent;

            var msie = ua.indexOf("MSIE ");
            if (msie > 0) {
                // IE 10 or older => return version number
                return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
            }

            var trident = ua.indexOf("Trident/");
            if (trident > 0) {
                // IE 11 => return version number
                var rv = ua.indexOf("rv:");
                return parseInt(ua.substring(rv + 3, ua.indexOf(".", rv)), 10);
            }

            var edge = ua.indexOf("Edge/");
            if (edge > 0) {
                // Edge (IE 12+) => return version number
                return parseInt(ua.substring(edge + 5, ua.indexOf(".", edge)), 10);
            }

            // other browser
            return false;
        },
        _isFirefox: function () {
            if (navigator.userAgent.indexOf("Firefox") > 0) {
                return 1;
            }

            return 0;
        },
        _downloadAnchor: function (content, ext) {
            var anchor = document.createElement("a");
            anchor.style = "display:none !important";
            anchor.id = "downloadanchor";
            document.body.appendChild(anchor);

            // If the [download] attribute is supported, try to use it

            if ("download" in anchor) {
                anchor.download = this._filename + "." + ext;
            }
            anchor.href = content;
            anchor.click();
            anchor.remove();
        },
        _tableToCSV: function (table) {
            // We'll be co-opting `slice` to create arrays
            var slice = Array.prototype.slice;

            return slice
              .call(table.rows)
              .map(function (row) {
                  return slice
                    .call(row.cells)
                    .map(function (cell) {
                        return '"t"'.replace("t", cell.textContent);
                    })
                    .join(",");
              })
              .join("\r\n");
        }
    };


   
</script>



